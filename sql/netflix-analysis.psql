--NETFLIX CONTENT ANALYSIS
SELECT version();

-- Table structure for Netflix dataset
CREATE TABLE IF NOT EXISTS netflix_content (
    show_id VARCHAR(10) PRIMARY KEY,
    type VARCHAR(10),
    title VARCHAR(200),
    director VARCHAR(500),
    "cast" VARCHAR(1000),
    country VARCHAR(500),
    date_added DATE,
    release_year INTEGER,
    rating VARCHAR(10),
    duration VARCHAR(20),
    listed_in VARCHAR(200),
    description TEXT
);


copy netflix_content (
    show_id, type, title, director, "cast", country, date_added, release_year, rating, duration, listed_in, description
)
FROM 'C:/Users/kenwa/OneDrive/Desktop/Portfolio/netflix-eda/data/processed/netflix_final_clean.csv'
DELIMITER ','
CSV HEADER;

-- ================================================================================
-- 1. BASIC DATA EXPLORATION
-- ================================================================================

-- Total content overview
SELECT 
    COUNT(*) as total_content,
    COUNT(CASE WHEN type = 'Movie' THEN 1 END) as total_movies,
    COUNT(CASE WHEN type = 'TV Show' THEN 1 END) as total_tv_shows,
    ROUND(COUNT(CASE WHEN type = 'Movie' THEN 1 END) * 100.0 / COUNT(*), 2) as movie_percentage,
    ROUND(COUNT(CASE WHEN type = 'TV Show' THEN 1 END) * 100.0 / COUNT(*), 2) as tv_show_percentage
FROM netflix_content;

-- Data quality check
SELECT 
    'show_id' as column_name, 
    COUNT(*) - COUNT(show_id) as missing_values,
    ROUND((COUNT(*) - COUNT(show_id)) * 100.0 / COUNT(*), 2) as missing_percentage
FROM netflix_content
UNION ALL
SELECT 
    'title', COUNT(*) - COUNT(title), 
    ROUND((COUNT(*) - COUNT(title)) * 100.0 / COUNT(*), 2)
FROM netflix_content
UNION ALL
SELECT 
    'director', COUNT(*) - COUNT(director), 
    ROUND((COUNT(*) - COUNT(director)) * 100.0 / COUNT(*), 2)
FROM netflix_content
UNION ALL
SELECT 
    'country', COUNT(*) - COUNT(country), 
    ROUND((COUNT(*) - COUNT(country)) * 100.0 / COUNT(*), 2)
FROM netflix_content
UNION ALL
SELECT 
    'date_added', COUNT(*) - COUNT(date_added), 
    ROUND((COUNT(*) - COUNT(date_added)) * 100.0 / COUNT(*), 2)
FROM netflix_content
ORDER BY missing_percentage DESC;

-- ================================================================================
-- 2. TEMPORAL ANALYSIS
-- ================================================================================

-- Content additions by year
SELECT 
    EXTRACT(YEAR FROM date_added) as year_added,
    COUNT(*) as total_additions,
    COUNT(CASE WHEN type = 'Movie' THEN 1 END) as movies_added,
    COUNT(CASE WHEN type = 'TV Show' THEN 1 END) as tv_shows_added
FROM netflix_content
WHERE date_added IS NOT NULL
GROUP BY EXTRACT(YEAR FROM date_added)
ORDER BY year_added;

-- Monthly addition patterns
SELECT 
    EXTRACT(MONTH FROM date_added) as month_number,
    CASE EXTRACT(MONTH FROM date_added)
        WHEN 1 THEN 'January'
        WHEN 2 THEN 'February'
        WHEN 3 THEN 'March'
        WHEN 4 THEN 'April'
        WHEN 5 THEN 'May'
        WHEN 6 THEN 'June'
        WHEN 7 THEN 'July'
        WHEN 8 THEN 'August'
        WHEN 9 THEN 'September'
        WHEN 10 THEN 'October'
        WHEN 11 THEN 'November'
        WHEN 12 THEN 'December'
    END as month_name,
    COUNT(*) as total_additions,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM netflix_content WHERE date_added IS NOT NULL), 2) as percentage
FROM netflix_content
WHERE date_added IS NOT NULL
GROUP BY EXTRACT(MONTH FROM date_added)
ORDER BY month_number;

-- Peak addition periods
SELECT 
    EXTRACT(YEAR FROM date_added) as year_added,
    COUNT(*) as additions_count,
    RANK() OVER (ORDER BY COUNT(*) DESC) as rank_by_additions
FROM netflix_content
WHERE date_added IS NOT NULL
GROUP BY EXTRACT(YEAR FROM date_added)
ORDER BY additions_count DESC
LIMIT 10;

-- Content age analysis (time between release and Netflix addition)
SELECT 
    EXTRACT(YEAR FROM date_added) - release_year as years_to_netflix,
    COUNT(*) as content_count,
    type
FROM netflix_content
WHERE date_added IS NOT NULL AND release_year IS NOT NULL
GROUP BY EXTRACT(YEAR FROM date_added) - release_year, type
HAVING EXTRACT(YEAR FROM date_added) - release_year BETWEEN 0 AND 50
ORDER BY years_to_netflix, type;

-- ================================================================================
-- 3. GEOGRAPHIC ANALYSIS
-- ================================================================================

-- Top content producing countries
WITH country_split AS (
    SELECT 
        TRIM(SPLIT_PART(country, ',', 1)) as primary_country,
        type,
        show_id
    FROM netflix_content
    WHERE country IS NOT NULL
)
SELECT 
    primary_country,
    COUNT(*) as total_content,
    COUNT(CASE WHEN type = 'Movie' THEN 1 END) as movies,
    COUNT(CASE WHEN type = 'TV Show' THEN 1 END) as tv_shows,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM country_split), 2) as percentage
FROM country_split
WHERE primary_country != ''
GROUP BY primary_country
ORDER BY total_content DESC
LIMIT 15;

-- US vs International content over time
WITH yearly_content AS (
    SELECT 
        EXTRACT(YEAR FROM date_added) as year_added,
        CASE 
            WHEN country LIKE '%United States%' THEN 'US Content'
            ELSE 'International Content'
        END as content_origin,
        COUNT(*) as content_count
    FROM netflix_content
    WHERE date_added IS NOT NULL AND country IS NOT NULL
    GROUP BY EXTRACT(YEAR FROM date_added), 
             CASE WHEN country LIKE '%United States%' THEN 'US Content' ELSE 'International Content' END
)
SELECT 
    year_added,
    SUM(CASE WHEN content_origin = 'US Content' THEN content_count ELSE 0 END) as us_content,
    SUM(CASE WHEN content_origin = 'International Content' THEN content_count ELSE 0 END) as international_content,
    ROUND(SUM(CASE WHEN content_origin = 'International Content' THEN content_count ELSE 0 END) * 100.0 / 
          SUM(content_count), 2) as international_percentage
FROM yearly_content
GROUP BY year_added
ORDER BY year_added;

-- Multi-country productions
SELECT 
    CASE 
        WHEN LENGTH(country) - LENGTH(REPLACE(country, ',', '')) + 1 = 1 THEN 'Single Country'
        WHEN LENGTH(country) - LENGTH(REPLACE(country, ',', '')) + 1 = 2 THEN 'Two Countries'
        WHEN LENGTH(country) - LENGTH(REPLACE(country, ',', '')) + 1 = 3 THEN 'Three Countries'
        ELSE 'Multiple Countries (4+)'
    END as collaboration_type,
    COUNT(*) as content_count,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM netflix_content WHERE country IS NOT NULL), 2) as percentage
FROM netflix_content
WHERE country IS NOT NULL
GROUP BY 1
ORDER BY content_count DESC;

-- ================================================================================
-- 4. CONTENT ANALYSIS
-- ================================================================================

-- Top genres analysis
WITH genre_split AS (
    SELECT 
        TRIM(SPLIT_PART(listed_in, ',', 1)) as genre,
        type,
        show_id
    FROM netflix_content
    WHERE listed_in IS NOT NULL
)
SELECT 
    genre,
    COUNT(*) as total_content,
    COUNT(CASE WHEN type = 'Movie' THEN 1 END) as movies,
    COUNT(CASE WHEN type = 'TV Show' THEN 1 END) as tv_shows,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM genre_split), 2) as percentage
FROM genre_split
WHERE genre != ''
GROUP BY genre
ORDER BY total_content DESC
LIMIT 15;

-- Rating distribution analysis
SELECT 
    rating,
    COUNT(*) as content_count,
    COUNT(CASE WHEN type = 'Movie' THEN 1 END) as movies,
    COUNT(CASE WHEN type = 'TV Show' THEN 1 END) as tv_shows,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM netflix_content WHERE rating IS NOT NULL), 2) as percentage
FROM netflix_content
WHERE rating IS NOT NULL
GROUP BY rating
ORDER BY content_count DESC;

-- Duration analysis for movies
SELECT 
    CASE 
        WHEN CAST(SPLIT_PART(duration, ' ', 1) AS INTEGER) < 90 THEN 'Short (< 90 min)'
        WHEN CAST(SPLIT_PART(duration, ' ', 1) AS INTEGER) BETWEEN 90 AND 120 THEN 'Standard (90-120 min)'
        WHEN CAST(SPLIT_PART(duration, ' ', 1) AS INTEGER) BETWEEN 121 AND 150 THEN 'Long (121-150 min)'
        ELSE 'Very Long (> 150 min)'
    END as duration_category,
    COUNT(*) as movie_count,
    ROUND(AVG(CAST(SPLIT_PART(duration, ' ', 1) AS INTEGER)), 2) as avg_duration
FROM netflix_content
WHERE type = 'Movie' AND duration LIKE '%min%'
GROUP BY 1
ORDER BY avg_duration;

-- ================================================================================
-- 5. ADVANCED ANALYTICS
-- ================================================================================

-- Content strategy evolution (recent vs older content)
SELECT 
    CASE 
        WHEN EXTRACT(YEAR FROM date_added) >= 2018 THEN 'Recent Strategy (2018+)'
        ELSE 'Earlier Strategy (Pre-2018)'
    END as strategy_period,
    COUNT(*) as total_content,
    ROUND(COUNT(CASE WHEN type = 'Movie' THEN 1 END) * 100.0 / COUNT(*), 2) as movie_percentage,
    ROUND(COUNT(CASE WHEN type = 'TV Show' THEN 1 END) * 100.0 / COUNT(*), 2) as tv_show_percentage,
    ROUND(COUNT(CASE WHEN country LIKE '%United States%' THEN 1 END) * 100.0 / COUNT(*), 2) as us_content_percentage
FROM netflix_content
WHERE date_added IS NOT NULL
GROUP BY 1;

-- Top directors by content volume
SELECT 
    TRIM(SPLIT_PART(director, ',', 1)) as director,
    COUNT(*) as total_content,
    COUNT(CASE WHEN type = 'Movie' THEN 1 END) as movies_directed,
    COUNT(CASE WHEN type = 'TV Show' THEN 1 END) as tv_shows_directed
FROM netflix_content
WHERE director IS NOT NULL AND TRIM(SPLIT_PART(director, ',', 1)) != ''
GROUP BY TRIM(SPLIT_PART(director, ',', 1))
HAVING COUNT(*) >= 3
ORDER BY total_content DESC
LIMIT 20;

-- Seasonal content addition patterns
SELECT 
    CASE 
        WHEN EXTRACT(MONTH FROM date_added) IN (12, 1, 2) THEN 'Winter'
        WHEN EXTRACT(MONTH FROM date_added) IN (3, 4, 5) THEN 'Spring'
        WHEN EXTRACT(MONTH FROM date_added) IN (6, 7, 8) THEN 'Summer'
        WHEN EXTRACT(MONTH FROM date_added) IN (9, 10, 11) THEN 'Fall'
    END as season,
    COUNT(*) as content_added,
    ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM netflix_content WHERE date_added IS NOT NULL), 2) as percentage
FROM netflix_content
WHERE date_added IS NOT NULL
GROUP BY 1
ORDER BY content_added DESC;

-- ================================================================================
-- 6. BUSINESS INSIGHTS QUERIES
-- ================================================================================

-- Content acquisition strategy by release year
SELECT 
    release_year,
    COUNT(*) as content_count,
    ROUND(AVG(EXTRACT(YEAR FROM date_added) - release_year), 2) as avg_years_to_acquisition,
    COUNT(CASE WHEN type = 'Movie' THEN 1 END) as movies,
    COUNT(CASE WHEN type = 'TV Show' THEN 1 END) as tv_shows
FROM netflix_content
WHERE date_added IS NOT NULL AND release_year IS NOT NULL
    AND release_year BETWEEN 1990 AND 2023
GROUP BY release_year
HAVING COUNT(*) >= 10
ORDER BY release_year DESC
LIMIT 20;

-- International expansion timeline
WITH international_content AS (
    SELECT 
        EXTRACT(YEAR FROM date_added) as year_added,
        COUNT(*) as total_content,
        COUNT(CASE WHEN country NOT LIKE '%United States%' THEN 1 END) as international_content
    FROM netflix_content
    WHERE date_added IS NOT NULL AND country IS NOT NULL
    GROUP BY EXTRACT(YEAR FROM date_added)
)
SELECT 
    year_added,
    total_content,
    international_content,
    ROUND(international_content * 100.0 / total_content, 2) as international_percentage,
    LAG(ROUND(international_content * 100.0 / total_content, 2)) OVER (ORDER BY year_added) as prev_year_percentage,
    ROUND(international_content * 100.0 / total_content, 2) - 
    LAG(ROUND(international_content * 100.0 / total_content, 2)) OVER (ORDER BY year_added) as percentage_change
FROM international_content
ORDER BY year_added;

-- Most prolific years for content creation vs acquisition
SELECT 
    release_year,
    COUNT(*) as titles_released,
    RANK() OVER (ORDER BY COUNT(*) DESC) as release_rank
FROM netflix_content
WHERE release_year IS NOT NULL
GROUP BY release_year
ORDER BY titles_released DESC
LIMIT 15;

-- ================================================================================
-- 7. PERFORMANCE METRICS
-- ================================================================================

-- Content diversity metrics
SELECT 
    'Total Unique Countries' as metric,
    COUNT(DISTINCT TRIM(SPLIT_PART(country, ',', 1))) as value
FROM netflix_content
WHERE country IS NOT NULL
UNION ALL
SELECT 
    'Total Unique Genres',
    COUNT(DISTINCT TRIM(SPLIT_PART(listed_in, ',', 1)))
FROM netflix_content
WHERE listed_in IS NOT NULL
UNION ALL
SELECT 
    'Total Unique Directors',
    COUNT(DISTINCT TRIM(SPLIT_PART(director, ',', 1)))
FROM netflix_content
WHERE director IS NOT NULL
UNION ALL
SELECT 
    'Total Unique Ratings',
    COUNT(DISTINCT rating)
FROM netflix_content
WHERE rating IS NOT NULL;

-- ================================================================================
-- END OF ANALYSIS
-- ================================================================================

-- Summary statistics for quick reference
SELECT 
    'Dataset Summary' as summary_type,
    COUNT(*) as total_records,
    MIN(release_year) as earliest_release_year,
    MAX(release_year) as latest_release_year,
    MIN(date_added) as first_netflix_addition,
    MAX(date_added) as latest_netflix_addition
FROM netflix_content;